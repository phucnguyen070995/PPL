Program([FuncDecl(Id(main),[],IntType,Block([VarDecl(n,IntType),VarDecl(originalNumber,IntType),VarDecl(remainder,IntType),VarDecl(result,IntType),BinaryOp(=,Id(n),IntLiteral(7)),BinaryOp(=,Id(result),IntLiteral(0)),BinaryOp(=,Id(originalNumber),Id(number)),For(Id(originalNumber);BinaryOp(!=,Id(originalNumber),IntLiteral(0));BinaryOp(=,Id(originalNumber),BinaryOp(/,Id(originalNumber),IntLiteral(10)));Block([BinaryOp(=,Id(remainder),BinaryOp(%,Id(originalNumber),IntLiteral(10))),BinaryOp(=,Id(result),BinaryOp(+,Id(result),BinaryOp(*,BinaryOp(*,Id(remainder),Id(remainder)),Id(remainder))))])),If(BinaryOp(==,Id(result),Id(number)),CallExpr(Id(printf),[StringLiteral(%d is an Armstrong number.),Id(number)]),CallExpr(Id(printf),[StringLiteral(%d is not an Armstrong number.),Id(number)])),Return(IntLiteral(0))]))])