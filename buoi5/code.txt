cau1
class ASTGeneration(MPVisitor):

    def visitProgram(self,ctx:MPParser.ProgramContext):

        return self.visit(ctx.vardecls()) + 1

    def visitVardecls(self,ctx:MPParser.VardeclsContext):

        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())

    def visitVardecltail(self,ctx:MPParser.VardecltailContext): 
        if ctx.vardecl(): 
            return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())
        else:
            return 0

    def visitVardecl(self,ctx:MPParser.VardeclContext): 
        return self.visit(ctx.mptype()) + self.visit(ctx.ids()) + 1

    def visitMptype(self,ctx:MPParser.MptypeContext):
        return 1

    def visitIds(self,ctx:MPParser.IdsContext):
        if ctx.ids():
            return 2 + self.visit(ctx.ids())
        return 1
------------------------------------------------------------------------------------
cau2
class ASTGeneration(MPVisitor):

    def visitProgram(self,ctx:MPParser.ProgramContext):

        return self.visit(ctx.vardecls()) + 1

    def visitVardecls(self,ctx:MPParser.VardeclsContext):

        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail()) + 1

    def visitVardecltail(self,ctx:MPParser.VardecltailContext): 
        if ctx.vardecl(): 
            return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail()) + 1
        else:
            return 1

    def visitVardecl(self,ctx:MPParser.VardeclContext): 
        return self.visit(ctx.ids()) + self.visit(ctx.mptype()) + 1

    def visitMptype(self,ctx:MPParser.MptypeContext):
        return 1

    def visitIds(self,ctx:MPParser.IdsContext):
        if ctx.ids():
            return self.visit(ctx.ids()) + 1
        return 1

------------------------------------------------------------------------------------
cau3
class ASTGeneration(MPVisitor):
    def visitProgram(self,ctx:MPParser.ProgramContext):
        return self.visit(ctx.vardecls())

    def visitVardecls(self,ctx:MPParser.VardeclsContext):
        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())

    def visitVardecltail(self,ctx:MPParser.VardecltailContext): 
        if ctx.vardecl(): 
            return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())
        else:
            return []

    def visitVardecl(self,ctx:MPParser.VardeclContext):
        type = self.visit(ctx.mptype())
        return [VarDecl(x,type) for x in self.visit(ctx.ids())]
	
    def visitMptype(self,ctx:MPParser.MptypeContext):
        if ctx.INTTYPE():
            return IntType()
        return FloatType()

    def visitIds(self,ctx:MPParser.IdsContext):
        if ctx.ids():
            return [Id(ctx.ID().getText())] + self.visit(ctx.ids())
        return [Id(ctx.ID().getText())]

------------------------------------------------------------------------------------
cau4
class ASTGeneration(MPVisitor):
    def visitProgram(self,ctx:MPParser.ProgramContext):
        return self.visit(ctx.exp())
        
    def visitExp(self,ctx:MPParser.ExpContext):
        if ctx.getChildCount() == 3:
            return Binary(ctx.getChild(1).getText(), self.visit(ctx.term()), self.visit(ctx.exp()))
        else:
            return self.visit(ctx.term())

    def visitTerm(self,ctx:MPParser.TermContext):
        if ctx.getChildCount() == 3: 
            return Binary(ctx.getChild(1).getText(), self.visit(ctx.factor(0)), self.visit(ctx.factor(1)))
        else:
            return self.visit(ctx.factor(0))

    def visitFactor(self,ctx:MPParser.FactorContext):
        if ctx.getChildCount() == 3: 
            return Binary(ctx.getChild(1).getText(), self.visit(ctx.factor()), self.visit(ctx.operand()))
        else:
            return self.visit(ctx.operand())

    def visitOperand(self,ctx:MPParser.OperandContext):
        if ctx.BOOLIT(): 
            return BooleanLiteral(ctx.BOOLIT().getText())
        elif ctx.INTLIT():
            return IntLiteral(ctx.INTLIT().getText())
        elif ctx.ID():
            return Id(ctx.ID().getText())
        else: 
            return self.visit(ctx.exp())

------------------------------------------------------------------------------------
Cau5
from functools import reduce
class ASTGeneration(MPVisitor):
    def visitProgram(self,ctx:MPParser.ProgramContext):
        return Program(reduce(lambda x, y: x + self.visit(y), ctx.vardecl(),[]))

    def visitVardecl(self,ctx:MPParser.VardeclContext): 
        type = self.visit(ctx.mptype())
        return [VarDecl(x, type) for x in self.visit(ctx.ids())]

    def visitMptype(self,ctx:MPParser.MptypeContext):
        if ctx.INTTYPE():
            return IntType()
        return FloatType()

    def visitIds(self,ctx:MPParser.IdsContext):
        return [Id(id.getText()) for id in ctx.ID()]

------------------------------------------------------------------------------------
cau6
from functools import reduce
class ASTGeneration(MPVisitor):
    def visitProgram(self,ctx:MPParser.ProgramContext):
        return self.visit(ctx.exp())

    def visitExp(self,ctx:MPParser.ExpContext):
        return reduce(lambda acc, ele: Binary(ele[0].getText(), self.visit(ele[1]), acc), [[ctx.ASSIGN()[i], ctx.term()[i]] for i in range(len(ctx.ASSIGN()))][::-1], self.visit(ctx.term()[-1]))

    def visitTerm(self,ctx:MPParser.TermContext):
        if ctx.getChildCount() == 3:
            return Binary(ctx.getChild(1).getText(), self.visit(ctx.factor(0)), self.visit(ctx.factor(1)))
        else:
            return self.visit(ctx.factor(0))

    def visitFactor(self,ctx:MPParser.FactorContext):
        return reduce(lambda acc, ele: Binary(ele[0].getText(), acc, self.visit(ele[1])), [[ctx.ANDOR()[i], ctx.operand()[i+1]] for i in range(len(ctx.ANDOR()))], self.visit(ctx.operand()[0]))

    def visitOperand(self,ctx:MPParser.OperandContext):
        if ctx.BOOLIT():
            return BooleanLiteral(ctx.BOOLIT().getText())
        elif ctx.INTLIT():
            return IntLiteral(ctx.INTLIT().getText())
        elif ctx.ID():
            return Id(ctx.ID().getText())
        else:
            return self.visit(ctx.exp())
----------------
class AST(ABC):
    def __eq__(self, other): 
        return self.__dict__ == other.__dict__

    @abstractmethod
    def accept(self, v, param):
        return v.visit(self, param)

class Type(AST):
    __metaclass__ = ABCMeta
    pass

class IntType(Type):
    def __str__(self):
        return "IntType"

    def accept(self, v, param):
        return v.visitIntType(self, param)

class FloatType(Type):
    def __str__(self):
        return "FloatType"

    def accept(self, v, param):
        return v.visitFloatType(self, param)


class Program(AST):
    #decl:list(Decl)
    def __init__(self, decl):
        self.decl = decl
    
    def __str__(self):
        return "Program([" + ','.join(str(i) for i in self.decl) + "])"
    
    def accept(self, v: Visitor, param):
        return v.visitProgram(self, param)

class Decl(AST):
    __metaclass__ = ABCMeta
    pass

class VarDecl(Decl):
    #variable:Id
    #varType: Type
    def __init__(self, variable, varType):
        self.variable = variable
        self.varType = varType

    def __str__(self):
        return "VarDecl(" + str(self.variable) + "," + str(self.varType) + ")"

    def accept(self, v, param):
        return v.visitVarDecl(self, param)


class Id(AST):
    #name:string
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return "Id(" + self.name + ")"

    def accept(self, v, param):
        return v.visitId(self, param)